{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Redovisningstexter för samtliga kursmoment</h1>
    <nav class="nav1">
        <ul>
            <a href="#kmom01">kmom01</a>
            <a href="#kmom02">kmom02</a>
            <a href="#kmom03">kmom03</a>
            <a href="#kmom04">kmom04</a>
            <a href="#kmom05">kmom05</a>
            <a href="#kmom06">kmom06</a>
            <a href="#kmom07/10">kmom07/10</a>
        </ul>
    </nav>
    <br>
    <h2 id="kmom01">Kmom01: Ramverk</h2>
    <p>Jag har lite förkunskaper och tidigare erfarenheter kring objektorientering på grund av att ha läst Oopython men vi använder flask istället av symfony. På webbdesign kursen också använder man av vertyget Pico.
        De fungerar nästan likadana.</p>

    <p>PHP stödjer objektorientering via klasser, objekt och de vanliga objektorienterade konstruktionerna som normalt förekommer i objektorienterade programmeringsspråk. Objekten är ofta modeller av verkliga ting.
        För att kunna använda objekt i sitt program måste man först definiera en klass. Klassen beskriver vilka data ett objekt ska kunna innehålla och vilka funktioner det ska ha. Det finns så många andra saker som
        ska tränas först, t.ex. variabler, if-satser, loop'ar, metoder, etc.</p>
        
    <p>Den här uppgiften med ramverket Symfony inom PHP har jag lite uppfattning nu om hur man bygger en webbplats med en kontroller samt använder vyer för att rendera webbsidorna. Det gick väldigt smydigt för att installera 
        och för att komma igång med Symfony. Symfony snabbar upp skapandet och underhållet av PHP-webbapplikationer och inga repetitiva kodning samt man har kraften i att kontrollera kodbas och sturktur.</p>
        
    <p>Artikeln “PHP The Right Way” är bra att läsa och har lagt den i min bookmark eftersom detta är ett levande dokument och kommer att fortsätta att uppdateras med mer användbar information och exempel när de blir tillgängliga.
        Clean Code Php för mig var extra intressant och värdefull att läsa och jag måste lära mig att kunna skriva DRY code för att undvika repetitiva kodning.</p>
        
    <p>Min TIL för detta kmom är att komma igång med grunderna om objekt och klasser i PHP, översikt över PHP som språk och de verktyg och processer man normalt arbetar med. Jag har lärt mig hur man installera Symfony ramverk och
        att komma igång med ramverket. Jag fick lite problem när jag kör "npm run build" på Cygwin terminalen eftersom jag fick hela tiden en error message som "cannot read properties of undefined (reading 'stdin')". Jag fick avinstallera
        node.js och npm och installera om igen många gånger och det tog en vecka för mig att hålla reda på om varför men lyckades inte. Då började jag från början, använder en annan terminal, klonade Kursrepo igen och installera om Symfony och
        npm run build funkar som det ska. Man känner så lättad att kunna se min symfony website.</p>
    

    <h2 id="kmom02">Kmom02: Objektorientering</h2>
    <p>Objektorienterade konstruktionerna arv påverkar många klasser och objekt relaterar till varandra. Till exempel, när en klass utökas, ärver underklassen alla offentliga och skyddade metoder, egenskaper och konstanter från den överordnade
        klassen. Om inte en klass åsidosätter dessa metoder kommer de att behålla sin ursprungliga funktionalitet. Komposition på andra sidan är en annan typ av relation mellan klasser som gör att en klass kan innehålla en annan. Där arv kan ses 
        som ett Is-A-förhållande, kan komposition ses som ett Has-A-förhållande. Till exempel en bil har en motor. Precis som arv tillåter komposition kodåteranvändning. Komposition är mer flexibel och är ett sätt att designa löst kopplade 
        applikationer. Interface låter dig skapa kod som anger vilka metoder en klass måste implementera, utan att behöva definiera hur dessa metoder ska implementeras. Gränssnitt delar ett namnområde med klasser och egenskaper, så de kanske inte
        använder samma namn. Trait är att återanvända kod och PHP implementerarar sån sätt. Egenskaper är en mekanism för kodåteranvändning i enstaka arvsspråk som PHP. Kombinationen av egenskaper och klasser definieras på ett sätt som minskar 
        komplexiteten och undviker de typiska problemen som är förknippade med multipelt arv. 

        Jag löste sig uppgiften via kolla på exempel, videor, föreläsningar, googling med mera. Jag tror att jag har gjort alla kraven på detta kursmoment. Det var väldigt många och lite förvirrad vad skulle man göra men jag fick lite ordning till
        sist. Jag har 3 klasser (Card, Deck och CardHand). Klassen Deck ärver från Card klass och har en relation till varandra. CardHand klass har en relation med till Card och Deck klass. Jag har skapat två controller (CardGameController och 
        JsonGameController). Där har jag samlat alla mina olika router på detta kursmoment. Jag använder sig av bilder av 52 Card Deck istället av UTF-8 coder. Det var väldigt smidigt att ladda och använda dem på min Card Game. Jag har inte bestämt
        mig än om jag ska göra en Solitaire Card Game eller en Hearts men jag har lagt lite beskrivning på min landningssida om Solitaire card game. Det finns mycket att förbättra i min kod. Det kommer att utveckla på nästa kursmoment men jag är redan
        nöjd med vad har jag uppnåt nu. Jag fick lite ordning på mina kod.
        
        Den här uppgiften kändes lite svårt och jag tror kommer att blir mer svårt sen men jag har bakrunden och jag kan det spelet. Jag försöker att följa instruktioner och exempel och behöver inte komplecerar mig. Så länge jag gör de kraven på varje
        uppgift, då kommer jag att klara den här kursen. Det är inte så lätt på min del eftersom jag läser på distans och känner inte så många. Jag googlar mycket och kollar på discord trådar samt föreläsningar på youtube som stödjer mig att lösa uppgiften.
        
        Min TIL på detta kursmoment är hur olika objektorienterade konstruktioner fungerar och hur de relaterar med varandra. Jag har lärt mig att ladda bilder på min template via asset/img. Det är faktiskt smidigt att använda sig av de funktioner/metoder
        som finns redan istället av att skriva om de för att rendera och visa på webben.</p>
    

    <h2 id="kmom03">Kmom03: Applikation</h2>
    <p>Detta kursmoment kändes väldigt stort och så mycket att göra för att uppfylla kraven bland annat att modelera kortspelet med flödesdiagram samt psuedokod. Men det gick väldigt smidigt och fick ihop alla som behövs att göra i det här kursmomentet.
        Youtube föreläsningar, discord, google, stackoverflow, github stödjer mig för att lösa och strukturera mina kod kring en applikation. I början har jag tänk att utveckla en poker kortspel men det var väldigt svårt och kommer inte att hinna klara uppgiften. Då 
        håller jag på Game21, ett lättare varianten av Blackjack spel. Jag har lagt alla klasser under katalogen src/Game21 som jag använde för att modelera min mini Game21 spel. Dessa klasser är bland annat Cards, CardDeck, CardHand, PLayer och Game21. 
        Jag har skapat Game21Controller under src/controller för att visa mitt spel på webben samt har jag lagt på JsonCardGameController min json version av game21. Jag har Game21 som min game landningssida som befinner sig alla twig html under templates/game. 
        När man trycker på Game21 då kommer man till en liten presentation av Game21 spel. Jag har skapat 2 buttons (Game21 rule och Game21 Documentation) där kan man välja att trycka för att läsa regler och documentation av spelet. Om man trycker på Game21 rules,
        kommer till en sida där man kan läsa regler samt en knapp för att börja spelet. Jag tror att jag har gjort allt krav och jag är väldigt nöjd men jag kommer att utveckla mer den på nästa kursmoment. Det finns så många saker jag vill ändra men har inte så mycket
        tid och jag har så mycket kvar att göra. Det känns bra för att koda i ett ramverk som Symfony och har lärt mig mycket att lägga inte för mycket kod på controller. 
        
        Min TIL för detta kmom är att försöka placera all applikationkod i klasser som kontroller använder så att ha så lite kod som möjligt i kontroller.</p>
    

    <h2 id="kmom04">Kmom04: Enhetstestning</h2>
    <p>Att skriva kod och testar min kod med PHPUnit känns bra och smidigt eftersom jag kan se vilka fel och vad ska jag rätta till samt få en lista över vilka rader i koden som har körts.
        Jag tycker att PHPUnit testverktyg är ett bra verktyg att använda för att testa som utvecklare. Vi har jobbat likadana innan på OOP med enhetstestning, då har jag lite koll hur testning funkar.</p>
    
    <p>Jag har försökt många gånger att ändra mina koder för att uppnå minst 90% överallt men det lyckades jag inte, iallafall den landade mellan 70%-100% och alla är grönt. Det var inte så lätt att göra
        testfall men jag gjorde vad jag kunde och kändes bra att nå några av mina metoder och koder nått mer än 90%. Efter att ha läst om stubs och kolla på exempel hur den funkar, då lägger jag till en stub fil
        och plötsligt det gick bra att skriva test. Nästan alla errors forsvann och fick jag 100%.</p>
    
    <p>I början hade jag för många metoder och koder som är inte nödvändigt till mitt spel samt jag lagt till alla mina filer som finns på Card till Game21 igen och ändrade namnet eftersom det körs inte om jag använder
        samma namn som redan finns. Men till slut jag fick mycket förståelse att man behöver inte göra det. Då tog jag bort de filer som är redan finns på Card katalogen och refera den på Game som use App\Card\Cards istället
        för att ha så många filer som inehåller likadana med olika class namn. Nu har jag bara 2 klasser in min Game katalog samt använder jag de filer som finns på Card katalog på min GameController. Då behöver jag inte 
        göra ett testfall på de igen. Till slut fick jag 100% när jag körde composer phpunit igen.</p>
        
    <p>Jag anser att testbar kod är något som kan identifiera “snygg och ren kod” och inte gör för mycket onödiga metoder och håller på KISS principen. Just nu har jag alltid påminna mig själv om KISS och säg till mig
        själv, "Keep It Simple Studpid".</p>
        
    <p>Min TIL för detta kmom är framförallt att använda KISS principen. Jag fick lära mig att skriva DRY kod för att få bra phpdoc dokumentaion samt kör testfallet till 100%.</p>
    

    <h2 id="kmom05">Kmom05: ORM / Databas</h2>
    <p>Det gick smidigt och kändes bra faktiskt att jobba igenom övningen med Symfony och Doctrine. Det gör lättare att skriva kod efter att ha gjort övningarna och få se hur allt funkar.</p>

    <p>Jag tycker att jag har lyckats att bygga upp min applikation med ORM i CRUD. Användningssnittet kan man säga upp till 100%. Den funkar som det ska och jag fick ordning på min design med. Jag tycker att det ser som 
        en riktig library databas men självklart det finns alltid mer att utveckla.</p>

    <p>Min uppfattning om ORM så här långt är att kunna se hur man kopplar ihop databasen med resten av koden.</p>
        
    <p>Min TIL för detta kmom är att det finns redan färdiga moduler som man kan använda och de är kraftfulla och sköter några delar och man behöver inte skriva för mycket kod/metoder/klasser själv.</p>
    

    <h2 id="kmom06">Kmom06: Automatiserad test</h2>
    <p>Jag tycker att PhpMetrics var riktigt bra. Phpmetrics verkade vara ett första steg för att samla många olika mätvärden. Men jag tycker att det var svårt att hitta det man letade efter.</p>

    <p>Upplevelsen av Scrutinizer var sådär, då vekligen allt i hela repot följde med och blev bedömt. Jag kanske hade fel config inställningar någonstans, men alla symfonys egen interface och traits etc, 
        blev också bedömda, vilket gjorde det super svårt att navigera och utreda mina egna klasser. Jag vet inte om det är Scrutinizer som är lite dåligt uppdaterat eller Symfony. Men när Scrut underkänner 
        massa kod från symfonys egen genererade kod, då känns det som att man verkligen får ta allt med en nypa salt. Man vill ju helst inte gå in och ändra i symfonys egen intefaces osv.</p>

    <p>Jag föreställer mig att bra kodkvalitet bara har ett löst samband med bra betyg på badges, men det är säkert så att alla projekt med dåliga badges har dålig kodkvalitet. Så bra eller åtminstonde 
        tillräckliga badges/betyg kanske är att ses som ett minimikrav, och dåliga eller inga badges är en varningssignal.</p>

    <p>Detta kursmoments TIL var hur mycket bättre kod jag själv kan skriva efter detta projekt. Jag ska vara mer uppmärksam från början när jag skriver kod och försökt att använda KISS principen.

    
    <h2 id="kmom07/10">Kmom07/10: Projekt och examination</h2>
    <p>Avsluta och redovisa din projektinlämning enligt följande.

        Testa ditt projekt med dbwebb test kmom10. Se till att alla delar passerar grönt.
        
        Tagga som v10.0.0, pusha till GitHub/Lab.
        
        Driftsätt din applikation på studentservern. Dubbelkolla att alla delar fungerar, inklusive nollställningen av databasen.
        
        På din me/report sida, skriv följande:
        
        För varje krav du implementerat, dvs 1-3, 4, 5, 6, skriver du ett textstycke om ca 5-10 meningar där du beskriver hur du löste kravet. Poängsättningen tar sin start i din text så se till att skriva väl för att undvika poängavdrag. Missar du att skriva/dokumentera din lösning så blir det 0 poäng. Du kan inte komplettera en inlämning för att få högre betyg.
        
        Skriv ett allmänt stycke om hur projektet gick att genomföra. Problem/lösningar/strul/enkelt/svårt/snabbt/lång tid, etc. Var projektet lätt eller svårt? Tog det lång tid? Vad var svårt och vad gick lätt? Var det ett bra och rimligt projekt för denna kursen?
        
        Avsluta med ett sista stycke med dina tankar om kursen och vad du anser om materialet och handledningen (ca 5-10 meningar). Ge feedback till lärarna och förslå eventuella förbättringsförslag till kommande kurstillfällen. Är du nöjd/missnöjd? Kommer du att rekommendera kursen till dina vänner/kollegor? På en skala 1-10, vilket betyg ger du kursen?
        
        Ta en kopia av texten på din redovisningssida och kopiera in den på Canvas. Glöm inte att bifoga länken till projektet på studentservern.
        
        Spela in en redovisningsvideo för projektet och lägg länken till videon i en kommentar på din inlämning i Canvas. Detta kan du göra dagen efter projektets deadline. Läs mer om hur du kan spela in en redovisningsvideo.</p>
{% endblock %}
